
GET http://localhost:5000/api/books?search=hello&author=Alok&from=2010-01-01&to=2020-12-31&page=1&limit=5&sortBy=publishDate&sortOrder=desc


Notes & Behavior checks

Dates: Accept YYYY-MM-DD (preferred). Controller also tolerates DD/MM/YYYY and basic Date strings but will validate.

Author matching uses case-insensitive exact match by default. Change to partial by changing the regex in controller.

Text search uses case-insensitive regex substring over name and description. For large datasets, switch to MongoDB $text search and use Book.find({ $text: { $search: searchTerm } }) together with a text index.

Pagination: limit capped to 50.

Sorting: supports name, author, publishDate.




9) OpenAPI (quick) â€” openapi.yaml

openapi: 3.0.3
info:
  title: Books API
  version: "1.0.0"
servers:
  - url: http://localhost:5000
paths:
  /api/books:
    post:
      summary: Create a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    get:
      summary: Explore books (search, filter, paginate, sort)
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: author
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, pattern: '^\d{4}-\d{2}-\d{2}$' }
        - in: query
          name: to
          schema: { type: string, pattern: '^\d{4}-\d{2}-\d{2}$' }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10, maximum: 50 }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name, author, publishDate], default: publishDate }
        - in: query
          name: sortOrder
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        '200':
          description: Book list
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta: { type: object }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Book' }
components:
  schemas:
    BookInput:
      type: object
      required: [name, description, author]
      properties:
        name: { type: string }
        description: { type: string, maxLength: 2000 }
        author: { type: string }
        publishDate: { type: string, example: "2015-03-25" }
    Book:
      allOf:
        - $ref: '#/components/schemas/BookInput'
        - type: object
          properties:
            _id: { type: string }
            createdAt: { type: string }
            updatedAt: { type: string }
